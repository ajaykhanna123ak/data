from line_profiler import LineProfiler
import functools
import io
import logging
import asyncio

logger = logging.getLogger("cpu_profiler")
logger.setLevel(logging.INFO)

class cpu_percent:
    def get_cpu_usage(self):
        def decorator(func):
            if asyncio.iscoroutinefunction(func):
                @functools.wraps(func)
                async def async_wrapper(*args, **kwargs):
                    profiler = LineProfiler()
                    profiler.add_function(func)
                    result = await profiler(func)(*args, **kwargs)
                    output_stream = io.StringIO()
                    profiler.print_stats(stream=output_stream)
                    output = output_stream.getvalue()
                    for line in output.splitlines():
                        logger.info(line)
                    return result
                return async_wrapper
            else:
                @functools.wraps(func)
                def sync_wrapper(*args, **kwargs):
                    profiler = LineProfiler()
                    profiler.add_function(func)
                    result = profiler(func)(*args, **kwargs)
                    output_stream = io.StringIO()
                    profiler.print_stats(stream=output_stream)
                    output = output_stream.getvalue()
                    for line in output.splitlines():
                        logger.info(line)
                    return result
                return sync_wrapper
        return decorator
