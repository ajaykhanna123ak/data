import asyncio
import functools
import time
import psutil
import io
import logging
from typing import Any

class Profiler:
    def __init__(self):
        self.logger = logging.getLogger(__name__)

    def track_cpu_usage(self, func: Any) -> Any:
        if asyncio.iscoroutinefunction(func):
            @functools.wraps(func)
            async def async_wrapper(*args, **kwargs):
                process = psutil.Process()
                start_cpu = process.cpu_percent(interval=None)
                start_time = time.time()

                result = await func(*args, **kwargs)

                end_time = time.time()
                end_cpu = process.cpu_percent(interval=None)

                duration = end_time - start_time
                self.logger.info(f"CPU usage for {func.__name__}: {end_cpu}%")
                self.logger.info(f"Execution time: {duration:.4f} seconds")

                return result

            return async_wrapper

        else:
            @functools.wraps(func)
            def sync_wrapper(*args, **kwargs):
                process = psutil.Process()
                start_cpu = process.cpu_percent(interval=None)
                start_time = time.time()

                result = func(*args, **kwargs)

                end_time = time.time()
                end_cpu = process.cpu_percent(interval=None)

                duration = end_time - start_time
                self.logger.info(f"CPU usage for {func.__name__}: {end_cpu}%")
                self.logger.info(f"Execution time: {duration:.4f} seconds")

                return result

            return sync_wrapper
